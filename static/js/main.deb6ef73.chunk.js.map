{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactsList/ListItem/ListItem.js","components/ContactsList/ContactsList.js","components/App.js","index.js"],"names":["INITIAL_STATE","name","number","ContactForm","state","handleInput","e","stateField","target","setState","value","handleSubmit","preventDefault","contact","id","uuid","props","addContact","clearInput","alert","this","onSubmit","className","type","onChange","Component","Filter","ListItem","deleteContact","onClick","ContactsList","contacts","map","App","filter","find","contactID","filteredContacts","filterNormalize","toLowerCase","includes","contactsInitial","JSON","parse","localStorage","getItem","prevProps","prevState","setItem","stringify","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.deb6ef73.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport PropTypes from 'prop-types';\nimport './ContactForm.scss';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nclass ContactForm extends Component {\n  static propTypes = {\n    addContact: PropTypes.func.isRequired,\n  };\n\n  state = {\n    ...INITIAL_STATE,\n  };\n\n  handleInput = e => {\n    const stateField = e.target.name;\n    this.setState({ [stateField]: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n\n    if (!name || !number) {\n      alert(`Complete the form please`);\n      return;\n    }\n\n    const contact = {\n      id: uuid(),\n      name,\n      number,\n    };\n    this.props.addContact(contact);\n    this.clearInput();\n  };\n\n  clearInput = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    const { handleInput, handleSubmit } = this;\n\n    return (\n      <form onSubmit={handleSubmit} className=\"ContactForm\">\n        <label>\n          <p className=\"ContactForm__label\">Name</p>\n          <input\n            className=\"ContactForm__text-input\"\n            type=\"text\"\n            value={name}\n            onChange={handleInput}\n            name=\"name\"\n          />\n        </label>{' '}\n        <label>\n          <p className=\"ContactForm__label\">Number</p>\n          <input\n            className=\"ContactForm__text-input\"\n            type=\"tel\"\n            value={number}\n            onChange={handleInput}\n            name=\"number\"\n          />\n        </label>\n        <div className=\"ContactForm__btnWrapper\">\n          <button className=\"ContactForm__btn\" type=\"submit\">\n            Add contact\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Filter.scss';\n\nconst Filter = ({ value, handleInput }) => {\n  return (\n    <label>\n      <p>Find contacts by name</p>\n      <input\n        className=\"Filter__input\"\n        type=\"text\"\n        onChange={handleInput}\n        name=\"filter\"\n        value={value}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  handleInput: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ListItem.scss';\n\nconst ListItem = ({ contact, deleteContact }) => {\n  const { id, name, number } = contact;\n  return (\n    <li className=\"ListItem\">\n      <span>\n        {name}: {number}\n      </span>\n      <button\n        className=\"ListItem__button\"\n        type=\"button\"\n        onClick={() => deleteContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ListItem;\n","import React from 'react';\nimport ListItem from './ListItem';\nimport PropTypes from 'prop-types';\nimport './ContactsList.scss';\n\nconst ContactsList = ({ contacts, deleteContact }) => {\n  return (\n    <ul className=\"ContactsList\">\n      {contacts.map(contact => (\n        <ListItem\n          key={contact.id}\n          contact={contact}\n          deleteContact={deleteContact}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import React, { Component } from 'react';\r\nimport ContactForm from './ContactForm';\r\nimport Filter from './Filter';\r\nimport ContactsList from './ContactsList';\r\n\r\n// localStorage.setItem('contacts', JSON.stringify(\r\n//   [\r\n//     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//   ]\r\n// ));\r\n// localStorage.removeItem('contacts')\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    const contactsInitial = JSON.parse(localStorage.getItem('contacts'));\r\n    if (contactsInitial) {\r\n      this.setState({ contacts: contactsInitial });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { contacts } = this.state;\r\n    if (contacts !== prevState.contacts) {\r\n      localStorage.setItem('contacts', JSON.stringify(contacts));\r\n    }\r\n  }\r\n\r\n  handleInput = e => {\r\n    const stateField = e.target.name;\r\n    this.setState({ [stateField]: e.target.value });\r\n  };\r\n\r\n  addContact = contact => {\r\n    const { name } = contact;\r\n    if (this.state.contacts.find(contact => contact.name === name)) {\r\n      alert(`${name} is already in contacts`);\r\n    } else {\r\n      this.setState(({ contacts }) => ({ contacts: [...contacts, contact] }));\r\n    }\r\n  };\r\n\r\n  deleteContact = contactID => {\r\n    const { contacts } = this.state;\r\n    this.setState({\r\n      contacts: contacts.filter(contact => contact.id !== contactID),\r\n    });\r\n  };\r\n\r\n  filteredContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n    const filterNormalize = filter.toLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(filterNormalize),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { handleInput, addContact, filteredContacts, deleteContact } = this;\r\n    const visibleContacts = filteredContacts();\r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm addContact={addContact} />\r\n        <Filter handleInput={handleInput} />\r\n        <h2>Contacts</h2>\r\n        <ContactsList\r\n          contacts={visibleContacts}\r\n          deleteContact={deleteContact}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}